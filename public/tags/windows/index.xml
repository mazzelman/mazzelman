<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows on Marcel Epp | Angehender Fachinformatiker in der Systemintegration</title>
    <link>http://localhost:1313/tags/windows/</link>
    <description>Recent content in Windows on Marcel Epp | Angehender Fachinformatiker in der Systemintegration</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de</language>
    <lastBuildDate>Fri, 29 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/windows/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SSH Schl√ºssel unter WSL erstellen</title>
      <link>http://localhost:1313/posts/2024/12/ssh-schl%C3%BCssel-erstellen-wsl/</link>
      <pubDate>Fri, 29 Nov 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2024/12/ssh-schl%C3%BCssel-erstellen-wsl/</guid>
      <description>&lt;p&gt;Um unter WSL in Windows einen SSH Schl√ºssel zu generieren und diesen dann mit GitHub zu benutzen, kann man wie folgt vorgehen. Als erstes kann man √ºberpr√ºfen ob ein Schl√ºssel vorhanden ist.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ls -al ~/.ssh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sollte es schon einen SSH Schl√ºssel geben erscheint eine Ausgabe die in etwa so aussehen kann:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;id_rsa.pub
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;id_ecdsa.pub
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;id_ef25419.pub
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wenn keine Ausgabe erfolgt, kann man einen neuen Schl√ºssel generieren:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-keygen -t ef25419 -C &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dein.name@gmail.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wenn die Abfrage erscheint, wo die Datei gespeichert werden soll, dr√ºckt man Enter um den Standard Ort zu w√§hlen. Weiterhin kommt eine Abfrage f√ºr eine &amp;ldquo;Passphrase&amp;rdquo;. Hier kann man ein zus√§tzliches &amp;ldquo;Passwort&amp;rdquo; vergeben. Dieses wird dann ggf. aber auch abgefragt. Als n√§chstes wird der &amp;ldquo;ssh-agent&amp;rdquo; gestartet.&lt;/p&gt;</description>
      <content>&lt;p&gt;Um unter WSL in Windows einen SSH Schl√ºssel zu generieren und diesen dann mit GitHub zu benutzen, kann man wie folgt vorgehen. Als erstes kann man √ºberpr√ºfen ob ein Schl√ºssel vorhanden ist.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ls -al ~/.ssh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sollte es schon einen SSH Schl√ºssel geben erscheint eine Ausgabe die in etwa so aussehen kann:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;id_rsa.pub
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;id_ecdsa.pub
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;id_ef25419.pub
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wenn keine Ausgabe erfolgt, kann man einen neuen Schl√ºssel generieren:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-keygen -t ef25419 -C &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dein.name@gmail.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wenn die Abfrage erscheint, wo die Datei gespeichert werden soll, dr√ºckt man Enter um den Standard Ort zu w√§hlen. Weiterhin kommt eine Abfrage f√ºr eine &amp;ldquo;Passphrase&amp;rdquo;. Hier kann man ein zus√§tzliches &amp;ldquo;Passwort&amp;rdquo; vergeben. Dieses wird dann ggf. aber auch abgefragt. Als n√§chstes wird der &amp;ldquo;ssh-agent&amp;rdquo; gestartet.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;ssh-agent -s&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wenn der &amp;ldquo;ssh-agent&amp;rdquo; l√§uft, kann man den Schl√ºssel mit dem &amp;ldquo;ssh-agent&amp;rdquo; bekannt machen.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-add ~/.ssh/id_ef25419
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nun kann man den Schl√ºssel bei GitHub angeben. Zuerst liest man den Schl√ºssel aus mit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat ~/.ssh/id_ed25519.pub | clip
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sollte kein clip auf dem System zur Verf√ºgung stehen, kann man den Befehl ohne clip ausf√ºhren und den Schl√ºssel aus dem Terminal kopieren. Auf Github begibt man sich nun auf die Seite und meldet sich an. Unter &amp;ldquo;Settings&amp;rdquo; gibt es dann &amp;ldquo;SSH and GPG keys&amp;rdquo;. Hier klickt man auf &amp;ldquo;New SSH key&amp;rdquo;. Als Titel kann man z.B. den Computer angeben, auf dem der Schl√ºssel liegt. Im &amp;ldquo;Key&amp;rdquo; Feld wird der kopierte Schl√ºssel eingef√ºgt. Um nun die Verbindung zu testen, kann man im Terminal den Befehl absetzen:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh -T git@github.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In der Regel wird jetzt nach einem &amp;ldquo;RSA key fingerprint&amp;rdquo; gefragt. Hier best√§tigt man mit yes. Sollte alles geklappt haben, bekommt man eine Meldung das man sich erfolgreich verbunden hat. üòé&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Die Powershell in Windows h√ºbscher machen</title>
      <link>http://localhost:1313/posts/2024/12/die-powershell-in-windows-h%C3%BCbscher-machen/</link>
      <pubDate>Wed, 29 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2024/12/die-powershell-in-windows-h%C3%BCbscher-machen/</guid>
      <description>&lt;p&gt;√úber die Jahre ist die Microsoft Eingabeaufforderung (CMD) immer besser geworden. Seit einiger Zeit, bietet Microsoft auch das Programm &amp;ldquo;Terminal&amp;rdquo; an, welches ich hier in diesem Beitrag verwende. Sollte das Terminal nicht installiert sein, kann man es bequem aus dem &lt;a href=&#34;https://www.microsoft.com/store/productId/9N0DX20HK701?ocid=pdpshare&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Microsoft Store&lt;/a&gt; installieren. Wenn man nun das Terminal startet, sollte das ganze in etwa so aussehen:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Terminal_1.png&#34; src=&#34;https://mazzelman.github.io/mazzelman//images/Terminal_1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Um zus√§tzlich die neue Windows Powershell zu verwenden, habe ich das Paket von Microsoft installiert. Die Powershell 7 kann &lt;a href=&#34;https://learn.microsoft.com/de-de/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.4&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;hier&lt;/a&gt; herunter geladen werden. In den Einstellungen kann dann die neue Powershell als Standardprofil ausgew√§hlt werden.&lt;/p&gt;</description>
      <content>&lt;p&gt;√úber die Jahre ist die Microsoft Eingabeaufforderung (CMD) immer besser geworden. Seit einiger Zeit, bietet Microsoft auch das Programm &amp;ldquo;Terminal&amp;rdquo; an, welches ich hier in diesem Beitrag verwende. Sollte das Terminal nicht installiert sein, kann man es bequem aus dem &lt;a href=&#34;https://www.microsoft.com/store/productId/9N0DX20HK701?ocid=pdpshare&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Microsoft Store&lt;/a&gt; installieren. Wenn man nun das Terminal startet, sollte das ganze in etwa so aussehen:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Terminal_1.png&#34; src=&#34;https://mazzelman.github.io/mazzelman//images/Terminal_1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Um zus√§tzlich die neue Windows Powershell zu verwenden, habe ich das Paket von Microsoft installiert. Die Powershell 7 kann &lt;a href=&#34;https://learn.microsoft.com/de-de/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.4&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;hier&lt;/a&gt; herunter geladen werden. In den Einstellungen kann dann die neue Powershell als Standardprofil ausgew√§hlt werden.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Terminal_2.png&#34; src=&#34;https://mazzelman.github.io/mazzelman//images/Terminal_2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Nun hat man die Powershell der Version 7 als Standard.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Terminal_3.png&#34; src=&#34;https://mazzelman.github.io/mazzelman//images/Terminal_3.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Um das ganze jetzt etwas informativer und sch√∂ner zu gestalten, kann man sich zu der Seite &lt;a href=&#34;https://ohmyposh.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&amp;ldquo;Oh My Posh&amp;rdquo;&lt;/a&gt; begeben. Hier kann im Bereich Installation auf English nachschauen, wie die Installation funktioniert. Ich gehe die Installation aber auch hier St√ºck f√ºr St√ºck durch.&lt;/p&gt;
&lt;p&gt;Als erstes installiert man sich &amp;ldquo;Oh My Posh&amp;rdquo; mit folgendem Befehl. Hier wird dazu der in Windows 11 integrierte Paketmanager &amp;ldquo;WinGet&amp;rdquo; benutzt.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Powershell&#34; data-lang=&#34;Powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;winget install JanDeDobbeleer.OhMyPosh -s winget
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wenn alles funktioniert hatte sollte es ungef√§hr so aussehen:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Terminal_4.png&#34; src=&#34;https://mazzelman.github.io/mazzelman//images/Terminal_4.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Wichtig! Jetzt muss das Terminal einmal neu gestartet werden, damit der Befehl akzeptiert wird.&lt;/p&gt;
&lt;p&gt;Mit dem Befehl &amp;ldquo;oh-my-posh version&amp;rdquo;, kann man jetzt √ºberpr√ºfen ob alles funktioniert. Bei mir wird die Version 24.11.2 ausgegeben.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Powershell&#34; data-lang=&#34;Powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;oh-my-posh version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Der n√§chste Schritt ist eine Schriftart zu installieren, die mit den Symbolen umgehen kann. Wie auf der Hauptseite erw√§hnt nehme ich ebenfalls die Schriftart &amp;ldquo;meslo&amp;rdquo; (Nerdfonts). Der Befehl daf√ºr lautet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Powershell&#34; data-lang=&#34;Powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;oh-my-posh font install meslo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wenn der Download √ºber das Terminal nicht funktioniert, kann man die Schrift auch manuell von &lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts/releases/latest/download/meslo.zip&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Github&lt;/a&gt; herunter laden und installieren. Eine erfolgreiche Installation schaut so aus:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Terminal_5.png&#34; src=&#34;https://mazzelman.github.io/mazzelman//images/Terminal_5.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Um die Schriftart nun im Terminal zu verwenden, muss man nun die JSON-Datei √∂ffnen. Also &amp;ldquo;Einstellungen -&amp;gt; JSON-Datei √∂ffnen&amp;rdquo; anklicken.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Terminal_6.png&#34; src=&#34;https://mazzelman.github.io/mazzelman//images/Terminal_6.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Das √∂ffnet den Code-Editor eurer Wahl. Bei mir ist es VS-Code. Hier sucht man die Stelle mit &amp;ldquo;profiles&amp;rdquo; und &amp;ldquo;defaults&amp;rdquo; heraus und f√ºgt folgenden Befehl in die zwei geschwungen Klammern bei &amp;ldquo;defaults&amp;rdquo; ein.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-JSON&#34; data-lang=&#34;JSON&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;font&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;face&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MesloLGM Nerd Font&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Das sieht dann ggf. so aus:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Terminal_7.png&#34; src=&#34;https://mazzelman.github.io/mazzelman//images/Terminal_7.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Dann noch speichern und das Terminal neu starten. Die Schrift sollte nun ein ganz klein wenig anders aussehen. Jetzt kann man &amp;ldquo;Oh my Posh&amp;rdquo; zum ersten Mal aktivieren. Dazu muss man das Profile der Powershell anpassen. Ich mache das mit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Powershell&#34; data-lang=&#34;Powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code $PROFILE
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sollte man kein VS Code installiert haben, geht es auch mit dem in Windows mitgelieferten Notepad.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Powershell&#34; data-lang=&#34;Powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;notepad $PROFILE
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Jetzt wir die Datei mit dem Namen &amp;ldquo;Microsoft.Powershell_profile.ps1&amp;rdquo; bearbeitet. Hier f√ºgt man in die Datei folgendes hinzu:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ps1&#34; data-lang=&#34;ps1&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;oh-my-posh init pwsh | Invoke-Expression
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Danach das Terminal neu starten. Wenn alles geklappt hat, sollte die Powershell nun so aussehen:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Terminal_8.png&#34; src=&#34;https://mazzelman.github.io/mazzelman//images/Terminal_8.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Um nun ein anderes Theme zu benutzen kann man unter dem Bereich &lt;a href=&#34;https://ohmyposh.dev/docs/themes&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Themes&lt;/a&gt; nachschauen. Ich mag das Theme &amp;ldquo;hul10&amp;rdquo; sehr gerne. Also lade ich mir die JSON-Datei direkt herunter und lege die Datei unter Dokumente -&amp;gt; Powershell ab. Jetzt √∂ffne ich die Powershell Konfiguration erneut mit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Powershell&#34; data-lang=&#34;Powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code $PROFILE
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hier ersetze ich den vorhanden Text und speichere das Profil.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Powershell&#34; data-lang=&#34;Powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;oh-my-posh init pwsh --config C:\Users\maz\Documents\PowerShell\hul10.omp.json | Invoke-Expression
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hat alles geklappt, sieht das Terminal jetzt so aus:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Terminal_9.png&#34; src=&#34;https://mazzelman.github.io/mazzelman//images/Terminal_9.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Optional: Um in VS Code auch die richtige Schrift zu bekommen, kann man in der &amp;ldquo;settings.json&amp;rdquo; folgendes hinzuf√ºgen:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-JSON&#34; data-lang=&#34;JSON&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;terminal.integrated.fontFamily&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MesloLGM Nerd Font&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Happy Hacking! ü•≥&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
